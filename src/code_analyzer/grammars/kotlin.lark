// Kotlin grammar for Lark

?start: kotlinFile

// Whitespace and comments
WS: /[ \t\f\r\n]+/
COMMENT: /\/\/[^\n]*/
       | /\/\*([^*]|\*[^\/])*\*\//
%ignore WS
%ignore COMMENT

// Identifiers and literals
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
STRING: /"[^"]*"/
NUMBER: /[0-9]+/

// Keywords
CLASS: "class"
OBJECT: "object"
FUN: "fun"
VAL: "val"
VAR: "var"
PACKAGE: "package"
IMPORT: "import"
OVERRIDE: "override"
CONSTRUCTOR: "constructor"
SUPER: "super"
RETURN: "return"
COMPANION: "companion"

// Modifiers
PUBLIC: "public"
PRIVATE: "private"
PROTECTED: "protected"
INTERNAL: "internal"
ABSTRACT: "abstract"
FINAL: "final"
OPEN: "open"

// Operators and punctuation
LBRACE: "{"
RBRACE: "}"
LPAREN: "("
RPAREN: ")"
COLON: ":"
DOT: "."
COMMA: ","
SEMI: ";"

// Rules
kotlinFile: packageHeader? importList? topLevelObject*

packageHeader: PACKAGE qualifiedName SEMI?
importList: importHeader*
importHeader: IMPORT qualifiedName (DOT "*")? SEMI?

qualifiedName: IDENTIFIER (DOT IDENTIFIER)*

topLevelObject: classDeclaration
              | objectDeclaration
              | functionDeclaration

classDeclaration: modifiers? CLASS IDENTIFIER (COLON delegationSpecifiers)? classBody?

modifiers: modifier*
modifier: PUBLIC
       | PRIVATE
       | PROTECTED
       | INTERNAL
       | ABSTRACT
       | FINAL
       | OPEN
       | OVERRIDE

delegationSpecifiers: delegationSpecifier (COMMA delegationSpecifier)*
delegationSpecifier: userType constructorInvocation?
constructorInvocation: valueArguments

userType: simpleUserType (DOT simpleUserType)*
simpleUserType: IDENTIFIER

classBody: LBRACE classMember* RBRACE
classMember: functionDeclaration
          | propertyDeclaration
          | classDeclaration
          | objectDeclaration

functionDeclaration: modifiers? FUN IDENTIFIER valueParameters functionBody?
valueParameters: LPAREN (valueParameter (COMMA valueParameter)*)? RPAREN
valueParameter: IDENTIFIER COLON typeReference
typeReference: userType

functionBody: block
block: LBRACE statement* RBRACE
statement: expression SEMI?

expression: IDENTIFIER
         | literal
         | SUPER
         | functionCall
         | block

functionCall: IDENTIFIER valueArguments
valueArguments: LPAREN (expression (COMMA expression)*)? RPAREN

literal: STRING | NUMBER

propertyDeclaration: modifiers? (VAL | VAR) IDENTIFIER (COLON typeReference)? SEMI?

objectDeclaration: modifiers? OBJECT IDENTIFIER (COLON delegationSpecifiers)? classBody? 